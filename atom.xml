<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>倒屋阁</title>
  <subtitle>所见的是暂时的，所不见的是永远的</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kkzhou.com/"/>
  <updated>2016-12-04T02:10:22.821Z</updated>
  <id>http://kkzhou.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>细说TCP滑动窗口</title>
    <link href="http://kkzhou.com/2016/12/04/%E7%BB%86%E8%AF%B4TCP%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>http://kkzhou.com/2016/12/04/细说TCP滑动窗口/</id>
    <published>2016-12-04T01:55:57.000Z</published>
    <updated>2016-12-04T02:10:22.821Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>将TCP与UDP这样的简单传输协议区分开来的是它传输数据的质量。TCP对于发送数据进行跟踪，这种数据管理需要协议有以下两大关键功能：</p>
<blockquote>
<ul>
<li>可靠性：保证数据确实到达目的地。如果未到达，能够发现并重传。</li>
<li>数据流控：管理数据的发送速率，以使接收设备不致于过载。</li>
</ul>
</blockquote>
<p>要完成这些任务，整个协议操作是围绕滑动窗口确认机制来进行的。因此，理解了滑动窗口，也就是理解了TCP。</p>
<h2 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h2><h3 id="TCP面向流的滑动窗口确认机制"><a href="#TCP面向流的滑动窗口确认机制" class="headerlink" title="TCP面向流的滑动窗口确认机制:"></a>TCP面向流的滑动窗口确认机制:</h3><p>TCP将独立的字节数据当作流来处理。一次发送一个字节并接收一次确认显然是不可行的。即使重叠传输（即不等待确认就发送下一个数据），速度也还是会非常缓慢。<br><img src="/images/2016/device-a-b.jpg" width="462" height="415" title="消息确认"><br>TCP消息确认机制如上图所示，首先，每一条消息都有一个识别编号，每一条消息都能够被独立地确认，因此同一时刻可以发送多条信息。设备B定期发送给A一条发送限制参数，制约设备A一次能发送的消息最大数量。设备B可以对该参数进行调整，以控制设备A的数据流。+</p>
<p>为了提高速度，TCP并没有按照字节单个发送而是将数据流划分为片段。片段内所有字节都是一起发送和接收的，因此也是一起确认的。确认机制没有采用message ID字段，而是使用的片段内最后一个字节的sequence number。因此一次可以处理不同的字节数，这一数量即为片段内的sequence number。</p>
<h3 id="TCP数据流的概念划分类别"><a href="#TCP数据流的概念划分类别" class="headerlink" title="TCP数据流的概念划分类别"></a>TCP数据流的概念划分类别</h3><p>假设A和B之间新建立了一条TCP连接。设备A需要传送一长串数据流，但设备B无法一次全部接收，所以它限制设备A每次发送分段指定数量的字节数，直到分段中已发送的字节数得到确认。之后，设备A可以继续发送更多字节。每一个设备都对发送，接收及确认数据进行追踪。</p>
<p>如果我们在任一时间点对于这一过程做一个“快照”，那么我们可以将TCP buffer中的数据分为以下四类，并把它们看作一个时间轴：</p>
<blockquote>
<ul>
<li>1.<strong>已发送已确认</strong> 数据流中最早的字节已经发送并得到确认。这些数据是站在发送设备的角度来看的。如下图所示，31个字节已经发送并确认。</li>
<li>2.<strong>已发送但尚未确认</strong> 已发送但尚未得到确认的字节。发送方在确认之前，不认为这些数据已经被处理。下图所示14字节为第2类。</li>
<li>3.<strong>未发送而接收方已Ready</strong><br>设备尚未将数据发出，但接收方根据最近一次关于发送方一次要发送多少字节确认自己有足够空间。发送方会立即尝试发送。如图，第3类有6字节</li>
<li>4.<strong>未发送而接收方Not Ready</strong> 由于接收方not ready，还不允许将这部分数据发出。</li>
</ul>
</blockquote>
<img src="/images/2016/tcp-byte-state.jpg" width="456" height="118" title="数据流概念">
<p>接收方采用类似的机制来区分已接收并已确认，尚未接受但准备好接收，以及尚未接收并尚未准备好接收的数据。实际上，收发双方各自维护一套独立的变量，来监控发送和接收的数据流落在哪一类。<br><a id="more"></a></p>
<h3 id="Sequence-Number设定与同步："><a href="#Sequence-Number设定与同步：" class="headerlink" title="Sequence Number设定与同步："></a>Sequence Number设定与同步：</h3><p>发送方和接收方必须就它们将要为数据流中的字节指定的sequence number达成一致。这一过程称为同步，在TCP连接建立时完成。为了简化假设第一个字节sequence number是1，按照上图示例，四类字节如下：</p>
<blockquote>
<ul>
<li>1.已发送已确认字节1至31。</li>
<li>2.已发送但尚未确认字节32至45。</li>
<li>3.未发送而接收方已Ready字节46至51。</li>
<li>4.未发送而接收方Not Ready字节52至95。</li>
</ul>
</blockquote>
<h3 id="发送窗口与可用窗口："><a href="#发送窗口与可用窗口：" class="headerlink" title="发送窗口与可用窗口："></a>发送窗口与可用窗口：</h3><p>整个过程关键的操作在于接收方允许发送方一次能容纳的未确认的字节数。这称为发送窗口，有时也称为窗口。该窗口决定了发送方允许传送的字节数，也是2类和3类的字节数之和。因此，最后两类（接收方准备好而尚未发送，接收方未准备好）的分界线在于添加了从第一个未确认字节开始的窗口。本例中，第一个未确认字节是32，整个窗口大小是20。</p>
<p>可用窗口的定义是：考虑到正在传输的数据量，发送方仍被允许发送的数据量。实际上等于第3类的大小。左边界就是窗口中的第一个字节（字节32），右边界是窗口中最后一个字节（字节51）。概念的详细解释看下图。</p>
<img src="/images/2016/tcp-window.jpg" width="458" height="187" title="tcp窗口">
<h3 id="可用窗口字节发送后TCP类目与窗口大小的改变："><a href="#可用窗口字节发送后TCP类目与窗口大小的改变：" class="headerlink" title="可用窗口字节发送后TCP类目与窗口大小的改变："></a>可用窗口字节发送后TCP类目与窗口大小的改变：</h3><p>当上图中第三类的6字节立即发送之后，这6字节从第3类转移到第2类。字节变为如下：</p>
<blockquote>
<ul>
<li>1.已发送已确认字节1至31。</li>
<li>2.已发送但尚未确认字节32至51。</li>
<li>3.未发送而接收方已Ready字节为0。</li>
<li>4.未发送而接收方Not Ready字节52至95。</li>
</ul>
</blockquote>
<img src="/images/2016/tcp-window-change.jpg" width="458" height="187" title="tcp窗口变化">
<h3 id="确认处理以及窗口缩放："><a href="#确认处理以及窗口缩放：" class="headerlink" title="确认处理以及窗口缩放："></a>确认处理以及窗口缩放：</h3><p>过了一段时间，目标设备向发送方传回确认信息。目标设备不会特别列出它已经确认的字节，因为这会导致效率低下。 <strong>目标设备会发送自上一次成功接收后的最长字节数</strong>。</p>
<p>例如，假设已发送未确认字节（32至45）分为4段传输：32-34，35-36，37-41，42-45。第1，2，4已经到达，而3段没有收到。接收方只会发回32-36的确认信息。接收方会保留42-45但不会确认，因为这会表示接收方已经收到了37-41。这是很必要的，因为TCP的确认机制是累计的，只使用一个数字来确认数据。这一数字是自上一次成功接收后的最长字节数。假设目标设备同样将窗口设为20字节。</p>
<p>当发送设备接收到确认信息，则会将一部分第2类字节转移到第1类，因为它们已经得到了确认。由于5个字节已被确认，窗口大小没有改变，允许发送方多发5个字节。结果，窗口向右滑动5个字节。同时5个字节从第二类移动到第1类，5个字节从第4类移动至第3类，为接下来的传输创建了新的可用窗口。因此，在接收到确认信息以后，看起来如下图所示。字节变为如下：</p>
<blockquote>
<ul>
<li>1.已发送已确认字节1至36。</li>
<li>2.已发送但尚未确认字节37至51。</li>
<li>3.未发送而接收方已Ready字节为52至56。</li>
<li>4.未发送而接收方Not Ready字节57至95。</li>
</ul>
</blockquote>
<img src="/images/2016/tcp-window-change.jpg" width="451" height="146" title="tcp重发">
<p>每一次确认接收以后，这一过程都会发生，从而让窗口滑动过整个数据流以供传输。</p>
<h3 id="处理丢失确认信息："><a href="#处理丢失确认信息：" class="headerlink" title="处理丢失确认信息："></a>处理丢失确认信息：</h3><p>但是丢失的42-45如何处理呢？在接收到第3段（37-41）之前，接收设备不会发送确认信息，也不会发送这一段之后字节的确认信息。发送设备可以将新的字节添加到第3类之后，即52-56。发送设备之后会停止发送，窗口停留在37-41。</p>
<p>TCP包括一个传输及重传的计时机制。TCP会重传丢失的片段。但有一个缺陷是：因为它不会对每一个片段分别进行确认，这可能会导致其他实际上已经接收到的片段被重传（比如42至45）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;将TCP与UDP这样的简单传输协议区分开来的是它传输数据的质量。TCP对于发送数据进行跟踪，这种数据管理需要协议有以下两大关键功能：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可靠性：保证数据确实到达目的地。如果未到达，能够发现并重传。&lt;/li&gt;
&lt;li&gt;数据流控：管理数据的发送速率，以使接收设备不致于过载。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;要完成这些任务，整个协议操作是围绕滑动窗口确认机制来进行的。因此，理解了滑动窗口，也就是理解了TCP。&lt;/p&gt;
&lt;h2 id=&quot;更多信息&quot;&gt;&lt;a href=&quot;#更多信息&quot; class=&quot;headerlink&quot; title=&quot;更多信息&quot;&gt;&lt;/a&gt;更多信息&lt;/h2&gt;&lt;h3 id=&quot;TCP面向流的滑动窗口确认机制&quot;&gt;&lt;a href=&quot;#TCP面向流的滑动窗口确认机制&quot; class=&quot;headerlink&quot; title=&quot;TCP面向流的滑动窗口确认机制:&quot;&gt;&lt;/a&gt;TCP面向流的滑动窗口确认机制:&lt;/h3&gt;&lt;p&gt;TCP将独立的字节数据当作流来处理。一次发送一个字节并接收一次确认显然是不可行的。即使重叠传输（即不等待确认就发送下一个数据），速度也还是会非常缓慢。&lt;br&gt;&lt;img src=&quot;/images/2016/device-a-b.jpg&quot; width=&quot;462&quot; height=&quot;415&quot; title=&quot;消息确认&quot;&gt;&lt;br&gt;TCP消息确认机制如上图所示，首先，每一条消息都有一个识别编号，每一条消息都能够被独立地确认，因此同一时刻可以发送多条信息。设备B定期发送给A一条发送限制参数，制约设备A一次能发送的消息最大数量。设备B可以对该参数进行调整，以控制设备A的数据流。+&lt;/p&gt;
&lt;p&gt;为了提高速度，TCP并没有按照字节单个发送而是将数据流划分为片段。片段内所有字节都是一起发送和接收的，因此也是一起确认的。确认机制没有采用message ID字段，而是使用的片段内最后一个字节的sequence number。因此一次可以处理不同的字节数，这一数量即为片段内的sequence number。&lt;/p&gt;
&lt;h3 id=&quot;TCP数据流的概念划分类别&quot;&gt;&lt;a href=&quot;#TCP数据流的概念划分类别&quot; class=&quot;headerlink&quot; title=&quot;TCP数据流的概念划分类别&quot;&gt;&lt;/a&gt;TCP数据流的概念划分类别&lt;/h3&gt;&lt;p&gt;假设A和B之间新建立了一条TCP连接。设备A需要传送一长串数据流，但设备B无法一次全部接收，所以它限制设备A每次发送分段指定数量的字节数，直到分段中已发送的字节数得到确认。之后，设备A可以继续发送更多字节。每一个设备都对发送，接收及确认数据进行追踪。&lt;/p&gt;
&lt;p&gt;如果我们在任一时间点对于这一过程做一个“快照”，那么我们可以将TCP buffer中的数据分为以下四类，并把它们看作一个时间轴：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.&lt;strong&gt;已发送已确认&lt;/strong&gt; 数据流中最早的字节已经发送并得到确认。这些数据是站在发送设备的角度来看的。如下图所示，31个字节已经发送并确认。&lt;/li&gt;
&lt;li&gt;2.&lt;strong&gt;已发送但尚未确认&lt;/strong&gt; 已发送但尚未得到确认的字节。发送方在确认之前，不认为这些数据已经被处理。下图所示14字节为第2类。&lt;/li&gt;
&lt;li&gt;3.&lt;strong&gt;未发送而接收方已Ready&lt;/strong&gt;&lt;br&gt;设备尚未将数据发出，但接收方根据最近一次关于发送方一次要发送多少字节确认自己有足够空间。发送方会立即尝试发送。如图，第3类有6字节&lt;/li&gt;
&lt;li&gt;4.&lt;strong&gt;未发送而接收方Not Ready&lt;/strong&gt; 由于接收方not ready，还不允许将这部分数据发出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;/images/2016/tcp-byte-state.jpg&quot; width=&quot;456&quot; height=&quot;118&quot; title=&quot;数据流概念&quot;&gt;
&lt;p&gt;接收方采用类似的机制来区分已接收并已确认，尚未接受但准备好接收，以及尚未接收并尚未准备好接收的数据。实际上，收发双方各自维护一套独立的变量，来监控发送和接收的数据流落在哪一类。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java常见GC参数介绍</title>
    <link href="http://kkzhou.com/2016/11/30/Java%E5%B8%B8%E8%A7%81GC%E5%8F%82%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
    <id>http://kkzhou.com/2016/11/30/Java常见GC参数介绍/</id>
    <published>2016-11-30T13:44:15.000Z</published>
    <updated>2016-12-04T01:57:48.231Z</updated>
    
    <content type="html"><![CDATA[<p>以下是经常配置用来优化JVM的一些参数</p>
<blockquote>
<ul>
<li>-Xmx2g -Xms2g 表示堆为2G </li>
<li>-Xmn256m 表示新生代为 256m </li>
<li>-Xss256k 设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。更具应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右</li>
<li>-XX:PermSize=128m 表示永久区为128m </li>
<li>-XX:+DisableExplicitGC 禁用显示的gc，程序程序中使用System.gc()中进行垃圾回收，使用这个参数后系统自动将 System.gc() 调用转换成一个空操作</li>
<li>-XX:+UseConcMarkSweepGC 表示使用CMS </li>
<li>-XX:+CMSParallelRemarkEnabled 表示并行remark </li>
<li>-XX:+UseCMSCompactAtFullCollection 表示在FGC之后进行压缩，因为CMS默认不压缩空间的。 </li>
<li>-XX:+UseCMSInitiatingOccupancyOnly 表示只在到达阀值的时候，才进行CMS GC <a id="more"></a></li>
<li>-XX:CMSInitiatingOccupancyFraction=70 设置阀值为70%，默认为68%。 </li>
<li>-XX:+UseCompressedOops JVM优化之压缩普通对象指针（CompressedOops），通常64位JVM消耗的内存会比32位的大1.5倍，这是因为对象指针在64位架构下，长度会翻倍（更宽的寻址）。对于那些将要从32位平台移植到64位的应用来说，平白无辜多了1/2的内存占用，这是开发者不愿意看到的。幸运的是，从JDK 1.6 update14开始，64 bit JVM正式支持了 -XX:+UseCompressedOops 这个可以压缩指针，起到节约内存占用的新参数.</li>
<li>关于-XX:+UseCMSInitiatingOccupancyOnly 和 -XX:CMSInitiatingOccupancyFraction ，详细解释见下：<br>The concurrent collection generally cannot be sped up but it can be started earlier.A concurrent collection starts running when the percentage of allocated space in the old generation crosses a threshold. This threshold is calculated based on general experience with the concurrent collector. If full collections are occurring, the concurrent collections may need to be started earlier. The command line flag CMSInitiatingOccupancyFraction can be used to set the level at which the collection is started. Its default value is approximately 68%. The command line to adjust the value is -XX:CMSInitiatingOccupancyFraction=<percent> The concurrent collector also keeps statistics on the promotion rate into the old generation for the application and makes a prediction on when to start a concurrent collection based on that promotion rate and the available free space in the old generation. Whereas the use of CMSInitiatingOccupancyFraction must be conservative to avoid full collections over the life of the application, the start of a concurrent collection based on the anticipated promotion adapts to the changing requirements of the application. The statistics that are used to calculate the promotion rate are based on the recent concurrent collections. The promotion rate is not calculated until at least one concurrent collection has completed so at least the first concurrent collection has to be initiated because the occupancy has reached CMSInitiatingOccupancyFraction . Setting CMSInitiatingOccupancyFraction to 100 would not cause only the anticipated promotion to be used to start a concurrent collection but would rather cause only non-concurrent collections to occur since a concurrent collection would not start until it was already too late. To eliminate the use of the anticipated promotions to start a concurrent collection set UseCMSInitiatingOccupancyOnly to true. -XX:+UseCMSInitiatingOccupancyOnly.</percent></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下是经常配置用来优化JVM的一些参数&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;-Xmx2g -Xms2g 表示堆为2G &lt;/li&gt;
&lt;li&gt;-Xmn256m 表示新生代为 256m &lt;/li&gt;
&lt;li&gt;-Xss256k 设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。更具应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右&lt;/li&gt;
&lt;li&gt;-XX:PermSize=128m 表示永久区为128m &lt;/li&gt;
&lt;li&gt;-XX:+DisableExplicitGC 禁用显示的gc，程序程序中使用System.gc()中进行垃圾回收，使用这个参数后系统自动将 System.gc() 调用转换成一个空操作&lt;/li&gt;
&lt;li&gt;-XX:+UseConcMarkSweepGC 表示使用CMS &lt;/li&gt;
&lt;li&gt;-XX:+CMSParallelRemarkEnabled 表示并行remark &lt;/li&gt;
&lt;li&gt;-XX:+UseCMSCompactAtFullCollection 表示在FGC之后进行压缩，因为CMS默认不压缩空间的。 &lt;/li&gt;
&lt;li&gt;-XX:+UseCMSInitiatingOccupancyOnly 表示只在到达阀值的时候，才进行CMS GC
    
    </summary>
    
    
      <category term="JVM" scheme="http://kkzhou.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>sed 简明教程</title>
    <link href="http://kkzhou.com/2015/12/12/sed-command/"/>
    <id>http://kkzhou.com/2015/12/12/sed-command/</id>
    <published>2015-12-12T08:20:23.000Z</published>
    <updated>2015-12-12T08:24:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用s命令替换"><a href="#用s命令替换" class="headerlink" title="用s命令替换"></a>用s命令替换</h2><p>我使用下面的这段文本做演示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ cat pets.txt</div><div class="line">This is my cat</div><div class="line">  my cat&apos;s name is betty</div><div class="line">This is my dog</div><div class="line">  my dog&apos;s name is frank</div><div class="line">This is my fish</div><div class="line">  my fish&apos;s name is george</div><div class="line">This is my goat</div><div class="line">  my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<p>把其中的my字符串替换成Hao Chen’s，下面的语句应该很好理解（s表示替换命令，/my/表示匹配my，/Hao Chen’s/表示把匹配替换成Hao Chen’s，/g 表示一行上的替换所有的匹配）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sed &quot;s/my/Hao Chen&apos;s/g&quot; pets.txt</div><div class="line">This is Hao Chen&apos;s cat</div><div class="line">  Hao Chen&apos;s cat&apos;s name is betty</div><div class="line">This is Hao Chen&apos;s dog</div><div class="line">  Hao Chen&apos;s dog&apos;s name is frank</div><div class="line">This is Hao Chen&apos;s fish</div><div class="line">  Hao Chen&apos;s fish&apos;s name is george</div><div class="line">This is Hao Chen&apos;s goat</div><div class="line">  Hao Chen&apos;s goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<p>注意：如果你要使用单引号，那么你没办法通过\’这样来转义，就有双引号就可以了，在双引号内可以用\”来转义。<br>再注意：上面的sed并没有对文件的内容改变，只是把处理过后的内容输出，如果你要写回文件，你可以使用重定向，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sed &quot;s/my/Hao Chen&apos;s/g&quot; pets.txt &gt; hao_pets.txt</div></pre></td></tr></table></figure></p>
<p>或使用 -i 参数直接修改文件内容：<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sed -i &quot;s/my/Hao Chen&apos;s/g&quot; pets.txt</div></pre></td></tr></table></figure></p>
<p>在每一行最前面加点东西：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;s/^/#/g&apos; pets.txt</div><div class="line">#This is my cat</div><div class="line">#  my cat&apos;s name is betty</div><div class="line">#This is my dog</div><div class="line">#  my dog&apos;s name is frank</div><div class="line">#This is my fish</div><div class="line">#  my fish&apos;s name is george</div><div class="line">#This is my goat</div><div class="line">#  my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<p>在每一行最后面加点东西：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;s/$/ --- /g&apos; pets.txt</div><div class="line">This is my cat ---</div><div class="line">  my cat&apos;s name is betty ---</div><div class="line">This is my dog ---</div><div class="line">  my dog&apos;s name is frank ---</div><div class="line">This is my fish ---</div><div class="line">  my fish&apos;s name is george ---</div><div class="line">This is my goat ---</div><div class="line">  my goat&apos;s name is adam ---</div></pre></td></tr></table></figure></p>
<p>顺手介绍一下正则表达式的一些最基本的东西：</p>
<blockquote>
<ul>
<li>^ 表示一行的开头。如：/^#/ 以#开头的匹配。</li>
<li>$ 表示一行的结尾。如：/}$/ 以}结尾的匹配。</li>
<li>\&lt; 表示词首。 如 \&lt;abc 表示以 abc 为首的詞。</li>
<li>> 表示词尾。 如 abc> 表示以 abc 結尾的詞。</li>
<li>. 表示任何单个字符。</li>
<li>* 表示某个字符出现了0次或多次。</li>
<li>[ ] 字符集合。如：[abc]表示匹配a或b或c，还有[a-zA-Z]表示匹配所有的26个字符。如果其中有^表示反，如[^a]表示非a的字符</li>
</ul>
</blockquote>
<p>正规则表达式是一些很牛的事，比如我们要去掉某html中的tags：<br>html.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;b&gt;This&lt;/b&gt; is what &lt;span style=&quot;text-decoration: underline;&quot;&gt;I&lt;/span&gt; meant. Understand?</div></pre></td></tr></table></figure></p>
<p>看看我们的sed命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 如果你这样搞的话，就会有问题</div><div class="line">$ sed &apos;s/&lt;.*&gt;//g&apos; html.txt</div><div class="line"> Understand?</div><div class="line"> </div><div class="line"># 要解决上面的那个问题，就得像下面这样。</div><div class="line"># 其中的&apos;[^&gt;]&apos; 指定了除了&gt;的字符重复0次或多次。</div><div class="line">$ sed &apos;s/&lt;[^&gt;]*&gt;//g&apos; html.txt</div><div class="line">This is what I meant. Understand?</div></pre></td></tr></table></figure></p>
<p>我们再来看看指定需要替换的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sed &quot;3s/my/your/g&quot; pets.txt</div><div class="line">This is my cat</div><div class="line">  my cat&apos;s name is betty</div><div class="line">This is your dog</div><div class="line">  my dog&apos;s name is frank</div><div class="line">This is my fish</div><div class="line">  my fish&apos;s name is george</div><div class="line">This is my goat</div><div class="line">  my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<p>下面的命令只替换第3到第6行的文本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sed &quot;3,6s/my/your/g&quot; pets.txt</div><div class="line">This is my cat</div><div class="line">  my cat&apos;s name is betty</div><div class="line">This is your dog</div><div class="line">  your dog&apos;s name is frank</div><div class="line">This is your fish</div><div class="line">  your fish&apos;s name is george</div><div class="line">This is my goat</div><div class="line">  my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cat my.txt</div><div class="line">This is my cat, my cat&apos;s name is betty</div><div class="line">This is my dog, my dog&apos;s name is frank</div><div class="line">This is my fish, my fish&apos;s name is george</div><div class="line">This is my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure>
<p>只替换每一行的第一个s：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;s/s/S/1&apos; my.txt</div><div class="line">ThiS is my cat, my cat&apos;s name is betty</div><div class="line">ThiS is my dog, my dog&apos;s name is frank</div><div class="line">ThiS is my fish, my fish&apos;s name is george</div><div class="line">ThiS is my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<p>只替换每一行的第二个s：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;s/s/S/2&apos; my.txt</div><div class="line">This iS my cat, my cat&apos;s name is betty</div><div class="line">This iS my dog, my dog&apos;s name is frank</div><div class="line">This iS my fish, my fish&apos;s name is george</div><div class="line">This iS my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<p>只替换第一行的第3个以后的s：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;s/s/S/3g&apos; my.txt</div><div class="line">This is my cat, my cat&apos;S name iS betty</div><div class="line">This is my dog, my dog&apos;S name iS frank</div><div class="line">This is my fiSh, my fiSh&apos;S name iS george</div><div class="line">This is my goat, my goat&apos;S name iS adam</div></pre></td></tr></table></figure></p>
<h2 id="多个匹配"><a href="#多个匹配" class="headerlink" title="多个匹配"></a>多个匹配</h2><p>如果我们需要一次替换多个模式，可参看下面的示例：（第一个模式把第一行到第三行的my替换成your，第二个则把第3行以后的This替换成了That）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;1,3s/my/your/g; 3,$s/This/That/g&apos; my.txt</div><div class="line">This is your cat, your cat&apos;s name is betty</div><div class="line">This is your dog, your dog&apos;s name is frank</div><div class="line">That is your fish, your fish&apos;s name is george</div><div class="line">That is my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<p>上面的命令等价于：（注：下面使用的是sed的-e命令行参数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -e &apos;1,3s/my/your/g&apos; -e &apos;3,$s/This/That/g&apos; my.txt</div></pre></td></tr></table></figure></p>
<p>我们可以使用&amp;来当做被匹配的变量，然后可以在基本左右加点东西。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;s/my/[&amp;]/g&apos; my.txt</div><div class="line">This is [my] cat, [my] cat&apos;s name is betty</div><div class="line">This is [my] dog, [my] dog&apos;s name is frank</div><div class="line">This is [my] fish, [my] fish&apos;s name is george</div><div class="line">This is [my] goat, [my] goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<h2 id="圆括号匹配"><a href="#圆括号匹配" class="headerlink" title="圆括号匹配"></a>圆括号匹配</h2><p>使用圆括号匹配的示例：（圆括号括起来的正则表达式所匹配的字符串会可以当成变量来使用，sed中使用的是\1,\2…）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;s/This is my \([^,]*\),.*is \(.*\)/\1:\2/g&apos; my.txt</div><div class="line">cat:betty</div><div class="line">dog:frank</div><div class="line">fish:george</div><div class="line">goat:adam</div></pre></td></tr></table></figure></p>
<p>上面这个例子中的正则表达式有点复杂，解开如下（去掉转义字符）：</p>
<p>正则为：This is my ([^,]<em>),.</em>is (.*)<br>匹配为：This is my (cat),……….is (betty)</p>
<p>然后：\1就是cat，\2就是betty</p>
<h2 id="sed的命令"><a href="#sed的命令" class="headerlink" title="sed的命令"></a>sed的命令</h2><p>让我们回到最一开始的例子pets.txt，让我们来看几个命令：</p>
<h3 id="N命令"><a href="#N命令" class="headerlink" title="N命令"></a>N命令</h3><p>先来看N命令 —— 把下一行的内容纳入当成缓冲区做匹配。</p>
<p>下面的的示例会把原文本中的偶数行纳入奇数行匹配，而s只匹配并替换一次，所以，就成了下面的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;N;s/my/your/&apos; pets.txt</div><div class="line">This is your cat</div><div class="line">  my cat&apos;s name is betty</div><div class="line">This is your dog</div><div class="line">  my dog&apos;s name is frank</div><div class="line">This is your fish</div><div class="line">  my fish&apos;s name is george</div><div class="line">This is your goat</div><div class="line">  my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<p>也就是说，原来的文件成了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">This is my cat\n  my cat&apos;s name is betty</div><div class="line">This is my dog\n  my dog&apos;s name is frank</div><div class="line">This is my fish\n  my fish&apos;s name is george</div><div class="line">This is my goat\n  my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<p>这样一来，下面的例子你就明白了，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;N;s/\n/,/&apos; pets.txt</div><div class="line">This is my cat,  my cat&apos;s name is betty</div><div class="line">This is my dog,  my dog&apos;s name is frank</div><div class="line">This is my fish,  my fish&apos;s name is george</div><div class="line">This is my goat,  my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<h3 id="a命令和i命令"><a href="#a命令和i命令" class="headerlink" title="a命令和i命令"></a>a命令和i命令</h3><p>a命令就是append， i命令就是insert，它们是用来添加行的。如：<br>其中的1i表明，其要在第1行前插入一行（insert）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sed &quot;1 i This is my monkey, my monkey&apos;s name is wukong&quot; my.txt</div><div class="line">This is my monkey, my monkey&apos;s name is wukong</div><div class="line">This is my cat, my cat&apos;s name is betty</div><div class="line">This is my dog, my dog&apos;s name is frank</div><div class="line">This is my fish, my fish&apos;s name is george</div><div class="line">This is my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<p>其中的1a表明，其要在最后一行后追加一行（append）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sed &quot;$ a This is my monkey, my monkey&apos;s name is wukong&quot; my.txt</div><div class="line">This is my cat, my cat&apos;s name is betty</div><div class="line">This is my monkey, my monkey&apos;s name is wukong</div><div class="line">This is my dog, my dog&apos;s name is frank</div><div class="line">This is my fish, my fish&apos;s name is george</div><div class="line">This is my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<p>我们可以运用匹配来添加文本：<br>注意其中的/fish/a，这意思是匹配到/fish/后就追加一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sed &quot;/fish/a This is my monkey, my monkey&apos;s name is wukong&quot; my.txt</div><div class="line">This is my cat, my cat&apos;s name is betty</div><div class="line">This is my dog, my dog&apos;s name is frank</div><div class="line">This is my fish, my fish&apos;s name is george</div><div class="line">This is my monkey, my monkey&apos;s name is wukong</div><div class="line">This is my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<p>下面这个例子是对每一行都挺插入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sed &quot;/my/a ----&quot; my.txt</div><div class="line">This is my cat, my cat&apos;s name is betty</div><div class="line">----</div><div class="line">This is my dog, my dog&apos;s name is frank</div><div class="line">----</div><div class="line">This is my fish, my fish&apos;s name is george</div><div class="line">----</div><div class="line">This is my goat, my goat&apos;s name is adam</div><div class="line">----</div></pre></td></tr></table></figure></p>
<h3 id="c命令"><a href="#c命令" class="headerlink" title="c命令"></a>c命令</h3><p>c 命令是替换匹配行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sed &quot;2 c This is my monkey, my monkey&apos;s name is wukong&quot; my.txt</div><div class="line">This is my cat, my cat&apos;s name is betty</div><div class="line">This is my monkey, my monkey&apos;s name is wukong</div><div class="line">This is my fish, my fish&apos;s name is george</div><div class="line">This is my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sed &quot;/fish/c This is my monkey, my monkey&apos;s name is wukong&quot; my.txt</div><div class="line">This is my cat, my cat&apos;s name is betty</div><div class="line">This is my dog, my dog&apos;s name is frank</div><div class="line">This is my monkey, my monkey&apos;s name is wukong</div><div class="line">This is my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure>
<h3 id="d命令"><a href="#d命令" class="headerlink" title="d命令"></a>d命令</h3><p>删除匹配行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;/fish/d&apos; my.txt</div><div class="line">This is my cat, my cat&apos;s name is betty</div><div class="line">This is my dog, my dog&apos;s name is frank</div><div class="line">This is my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;2d&apos; my.txt</div><div class="line">This is my cat, my cat&apos;s name is betty</div><div class="line">This is my fish, my fish&apos;s name is george</div><div class="line">This is my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;2,$d&apos; my.txt</div><div class="line">This is my cat, my cat&apos;s name is betty</div></pre></td></tr></table></figure>
<h3 id="p命令"><a href="#p命令" class="headerlink" title="p命令"></a>p命令</h3><p><strong>打印命令</strong><br>你可以把这个命令当成grep式的命令,匹配fish并输出，可以看到fish的那一行被打了两遍，这是因为sed处理时会把处理的信息输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sed &apos;/fish/p&apos; my.txt</div><div class="line">This is my cat, my cat&apos;s name is betty</div><div class="line">This is my dog, my dog&apos;s name is frank</div><div class="line">This is my fish, my fish&apos;s name is george</div><div class="line">This is my fish, my fish&apos;s name is george</div><div class="line">This is my goat, my goat&apos;s name is adam</div></pre></td></tr></table></figure></p>
<h4 id="使用n参数就好了"><a href="#使用n参数就好了" class="headerlink" title="使用n参数就好了"></a>使用n参数就好了</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sed -n &apos;/fish/p&apos; my.txt</div><div class="line">This is my fish, my fish&apos;s name is george</div></pre></td></tr></table></figure>
<h4 id="从一个模式到另一个模式"><a href="#从一个模式到另一个模式" class="headerlink" title="从一个模式到另一个模式"></a>从一个模式到另一个模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sed -n &apos;/dog/,/fish/p&apos; my.txt</div><div class="line">This is my dog, my dog&apos;s name is frank</div><div class="line">This is my fish, my fish&apos;s name is george</div></pre></td></tr></table></figure>
<h4 id="从第一行打印到匹配fish成功的那一行"><a href="#从第一行打印到匹配fish成功的那一行" class="headerlink" title="从第一行打印到匹配fish成功的那一行"></a>从第一行打印到匹配fish成功的那一行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sed -n &apos;1,/fish/p&apos; my.txt</div><div class="line">This is my cat, my cat&apos;s name is betty</div><div class="line">This is my dog, my dog&apos;s name is frank</div><div class="line">This is my fish, my fish&apos;s name is george</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用s命令替换&quot;&gt;&lt;a href=&quot;#用s命令替换&quot; class=&quot;headerlink&quot; title=&quot;用s命令替换&quot;&gt;&lt;/a&gt;用s命令替换&lt;/h2&gt;&lt;p&gt;我使用下面的这段文本做演示：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ cat pets.txt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This is my cat&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  my cat&amp;apos;s name is betty&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This is my dog&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  my dog&amp;apos;s name is frank&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This is my fish&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  my fish&amp;apos;s name is george&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This is my goat&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  my goat&amp;apos;s name is adam&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把其中的my字符串替换成Hao Chen’s，下面的语句应该很好理解（s表示替换命令，/my/表示匹配my，/Hao Chen’s/表示把匹配替换成Hao Chen’s，/g 表示一行上的替换所有的匹配）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sed &amp;quot;s/my/Hao Chen&amp;apos;s/g&amp;quot; pets.txt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This is Hao Chen&amp;apos;s cat&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Hao Chen&amp;apos;s cat&amp;apos;s name is betty&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This is Hao Chen&amp;apos;s dog&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Hao Chen&amp;apos;s dog&amp;apos;s name is frank&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This is Hao Chen&amp;apos;s fish&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Hao Chen&amp;apos;s fish&amp;apos;s name is george&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;This is Hao Chen&amp;apos;s goat&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Hao Chen&amp;apos;s goat&amp;apos;s name is adam&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意：如果你要使用单引号，那么你没办法通过\’这样来转义，就有双引号就可以了，在双引号内可以用\”来转义。&lt;br&gt;再注意：上面的sed并没有对文件的内容改变，只是把处理过后的内容输出，如果你要写回文件，你可以使用重定向，如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sed &amp;quot;s/my/Hao Chen&amp;apos;s/g&amp;quot; pets.txt &amp;gt; hao_pets.txt&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或使用 -i 参数直接修改文件内容：
    
    </summary>
    
      <category term="Linux命令" scheme="http://kkzhou.com/categories/Linux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="Linux命令" scheme="http://kkzhou.com/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Sed" scheme="http://kkzhou.com/tags/Sed/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用示例</title>
    <link href="http://kkzhou.com/2015/11/01/hexo%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <id>http://kkzhou.com/2015/11/01/hexo使用示例/</id>
    <published>2015-11-01T08:33:04.000Z</published>
    <updated>2015-11-01T09:58:53.855Z</updated>
    
    <content type="html"><![CDATA[<p>这是<strong>新的开始</strong>，我用hexo创建了第一篇文章。</p>
<p>通过下面的命令，就可以创建新文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">D:\workspace\javascript\nodejs-hexo&gt;hexo new 新的开始</div><div class="line">[info] File created at D:\workspace\javascript\nodejs-hexo\source\_posts\新的开始.md</div></pre></td></tr></table></figure></p>
<p>感觉非常好。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="external">Welcome to Island Marketing</a></cite></footer></blockquote>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight excel"><figcaption><span>.compact</span><a href="http://underscorejs.org/#compact" target="_blank" rel="external">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="built_in">false</span>, <span class="number">2</span>, ‘’, <span class="number">3</span>]);</div><div class="line">=&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><a href="https://www.google.com.hk" title="谷歌" target="_blank">谷歌</a>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><img src="/images/fens.me.png" width="400" height="600" title="这是一张图片">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是&lt;strong&gt;新的开始&lt;/strong&gt;，我用hexo创建了第一篇文章。&lt;/p&gt;
&lt;p&gt;通过下面的命令，就可以创建新文章&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;di
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://kkzhou.com/2015/10/31/hello-world/"/>
    <id>http://kkzhou.com/2015/10/31/hello-world/</id>
    <published>2015-10-31T11:32:38.170Z</published>
    <updated>2015-10-31T11:32:38.195Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
    
    </summary>
    
    
  </entry>
  
</feed>
